diff --git a/agda-typecheck-web.cabal b/agda-typecheck-web.cabal
index 7f14ca0..1489929 100644
--- a/agda-typecheck-web.cabal
+++ b/agda-typecheck-web.cabal
@@ -1,6 +1,6 @@
 cabal-version: 1.12
 
--- This file has been generated from package.yaml by hpack version 0.35.1.
+-- This file has been generated from package.yaml by hpack version 0.35.2.
 --
 -- see: https://github.com/sol/hpack
 
@@ -26,7 +26,7 @@ source-repository head
 library
   exposed-modules:
       Compilation
-      Lib
+      Extra
       Types
   other-modules:
       Paths_agda_typecheck_web
@@ -36,8 +36,13 @@ library
   build-depends:
       aeson
     , base >=4.7 && <5
+    , bytestring
+    , neat-interpolation
     , scotty
     , text
+    , wai
+    , wai-extra
+    , wai-middleware-static
   default-language: Haskell2010
 
 executable agda-typecheck-web-exe
@@ -51,8 +56,13 @@ executable agda-typecheck-web-exe
       aeson
     , agda-typecheck-web
     , base >=4.7 && <5
+    , bytestring
+    , neat-interpolation
     , scotty
     , text
+    , wai
+    , wai-extra
+    , wai-middleware-static
   default-language: Haskell2010
 
 test-suite agda-typecheck-web-test
@@ -67,6 +77,11 @@ test-suite agda-typecheck-web-test
       aeson
     , agda-typecheck-web
     , base >=4.7 && <5
+    , bytestring
+    , neat-interpolation
     , scotty
     , text
+    , wai
+    , wai-extra
+    , wai-middleware-static
   default-language: Haskell2010
diff --git a/app/Main.hs b/app/Main.hs
index 2988908..9865a35 100644
--- a/app/Main.hs
+++ b/app/Main.hs
@@ -1,4 +1,5 @@
 {-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE QuasiQuotes #-}
 {-# OPTIONS_GHC -fno-warn-unused-matches #-}
 {-# OPTIONS_GHC -fno-warn-unused-imports #-}
 {-# OPTIONS_GHC -fno-warn-unused-binds #-}
@@ -8,15 +9,39 @@
 module Main where
 
 import Types
+import Extra
+
+import qualified NeatInterpolation as NI(text)
+
+import Data.Text.Lazy
+import Control.Monad.IO.Class (liftIO)
+
+
+import Data.Text as T
+import Data.Text.Lazy as TL
+
 
 import Web.Scotty
-import Data.Text
--- import Data.Monoid (mconcat)
+import qualified Network.Wai.Parse as NWP
+
 
 main :: IO ()
-main = scotty 3000 $
- post "/agda" $ do
-   incoming  <- jsonData :: (ActionM AgaType)
-   text $ "agda res api test" 
+main = scotty 3000 $ do
+
+ post "/compile/agda" $ do
+   incoming  <- files
+   let rcf = checkFiles incoming
+   case rcf of
+     Ok x ->  text $ "response here"
+     Err x -> html $ "response here"
+
+
+
+ get "/" $  text  $ TL.fromStrict info
 
 
+info :: T.Text
+info =  [NI.text|
+EXAMPLE OF USAGE
+Multilien text
+or HTML |]
diff --git a/package.yaml b/package.yaml
index 387ea59..72685d9 100644
--- a/package.yaml
+++ b/package.yaml
@@ -23,7 +23,12 @@ dependencies:
 - base >= 4.7 && < 5
 - scotty
 - text
-- aeson 
+- aeson
+- neat-interpolation
+- bytestring
+- wai 
+- wai-extra
+- wai-middleware-static
 
 ghc-options:
 - -Wall
diff --git a/src/Compilation.hs b/src/Compilation.hs
index 70a6f43..7235ceb 100644
--- a/src/Compilation.hs
+++ b/src/Compilation.hs
@@ -10,3 +10,5 @@
 
 module Compilation  where
 
+import Types
+
diff --git a/src/Extra.hs b/src/Extra.hs
new file mode 100644
index 0000000..2b61559
--- /dev/null
+++ b/src/Extra.hs
@@ -0,0 +1,27 @@
+{-# LANGUAGE OverloadedStrings #-}
+{-# OPTIONS_GHC -fno-warn-unused-matches #-}
+{-# OPTIONS_GHC -fno-warn-unused-imports #-}
+{-# OPTIONS_GHC -fno-warn-unused-binds #-}
+{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
+{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE DeriveAnyClass #-}
+
+module Extra where
+
+import Types
+
+import Web.Scotty
+import qualified Network.Wai.Parse as NWP
+
+import Data.Text as T
+import Data.Text.Lazy as TL
+
+
+import qualified Data.ByteString.Lazy.Internal as BL
+import qualified Data.ByteString.Char8 as BC
+
+checkFiles :: [File] -> CheckRes
+checkFiles fl = case Prelude.length fl of
+  _ -> Err "de"
+  
diff --git a/src/Types.hs b/src/Types.hs
index 1b81edf..2d3cac9 100644
--- a/src/Types.hs
+++ b/src/Types.hs
@@ -14,10 +14,23 @@ import GHC.Generics
 import Data.Aeson
 import Data.Aeson.Text
 
-data AgaType = AgaType 
+data AgaType = AgaType
                 { problem :: String
-                , goal :: String
-                , meta :: String 
+                , meta :: MetaD
                 }  deriving (Show , Generic, ToJSON, FromJSON )
 
 
+
+data MetaD = MetaD { agdaVersion :: String
+                   , dependencies :: [String]
+                   } deriving (Show , Generic, ToJSON, FromJSON )
+
+
+
+data CompilerRes = CompilerRes { status :: Int
+                               , err :: String
+                               } deriving (Show , Generic, ToJSON, FromJSON )
+
+
+data CheckRes = Ok AgaType | Err String
+
